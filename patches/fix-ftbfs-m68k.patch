From: Andreas Schwab <schwab@linux-m68k.org>
Subject: Fix FTBFS in m68k
Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=696236
Forwarded: no
Index: webkitgtk/Source/WTF/wtf/Platform.h
===================================================================
--- webkitgtk.orig/Source/WTF/wtf/Platform.h
+++ webkitgtk/Source/WTF/wtf/Platform.h
@@ -355,6 +355,12 @@
 #define WTF_CPU_NEEDS_ALIGNED_ACCESS 1
 #endif
 
+/* CPU(M68K) - m68k */
+#if defined(__mc68000__)
+#define WTF_CPU_M68K 1
+#define WTF_CPU_BIG_ENDIAN 1
+#endif
+
 /* ==== OS() - underlying operating system; only to be used for mandated low-level services like 
    virtual memory, not to choose a GUI toolkit ==== */
 
@@ -846,7 +852,7 @@
 #define ENABLE_REGEXP_TRACING 0
 
 /* Yet Another Regex Runtime - turned on by default for JIT enabled ports. */
-#if !defined(ENABLE_YARR_JIT) && (ENABLE(JIT) || ENABLE(LLINT_C_LOOP))
+#if !defined(ENABLE_YARR_JIT) && (ENABLE(JIT) || ENABLE(LLINT_C_LOOP)) && !CPU(M68K)
 #define ENABLE_YARR_JIT 1
 
 /* Setting this flag compares JIT results with interpreter results. */
Index: webkitgtk/Source/WTF/wtf/dtoa/utils.h
===================================================================
--- webkitgtk.orig/Source/WTF/wtf/dtoa/utils.h
+++ webkitgtk/Source/WTF/wtf/dtoa/utils.h
@@ -60,6 +60,8 @@ defined(_MIPS_ARCH_MIPS32R2)
 #endif  // _WIN32
 #elif defined(WINCE) || defined(_WIN32_WCE)
 #define DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS 1
+#elif defined(__mc68000__)
+#undef DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS
 #else
 #error Target architecture was not detected as supported by Double-Conversion.
 #endif
Index: webkitgtk/Source/WebCore/css/CSSProperty.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/css/CSSProperty.cpp
+++ webkitgtk/Source/WebCore/css/CSSProperty.cpp
@@ -34,7 +34,11 @@ struct SameSizeAsCSSProperty {
     void* value;
 };
 
+#if CPU(M68K)
+COMPILE_ASSERT(sizeof(CSSProperty) <= sizeof(SameSizeAsCSSProperty), CSSProperty_should_stay_small);
+#else
 COMPILE_ASSERT(sizeof(CSSProperty) == sizeof(SameSizeAsCSSProperty), CSSProperty_should_stay_small);
+#endif
 
 CSSPropertyID StylePropertyMetadata::shorthandID() const
 {
Index: webkitgtk/Source/WebCore/dom/ElementRareData.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/dom/ElementRareData.cpp
+++ webkitgtk/Source/WebCore/dom/ElementRareData.cpp
@@ -42,6 +42,10 @@ struct SameSizeAsElementRareData : NodeR
     void* pointers[7];
 };
 
+#if CPU(M68K)
+COMPILE_ASSERT(sizeof(ElementRareData) <= sizeof(SameSizeAsElementRareData), ElementRareDataShouldStaySmall);
+#else
 COMPILE_ASSERT(sizeof(ElementRareData) == sizeof(SameSizeAsElementRareData), ElementRareDataShouldStaySmall);
+#endif
 
 } // namespace WebCore
Index: webkitgtk/Source/WebCore/dom/NodeRareData.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/dom/NodeRareData.cpp
+++ webkitgtk/Source/WebCore/dom/NodeRareData.cpp
@@ -38,6 +38,10 @@ struct SameSizeAsNodeRareData {
     void* m_pointer[3];
 };
 
+#if CPU(M68K)
+COMPILE_ASSERT(sizeof(NodeRareData) <= sizeof(SameSizeAsNodeRareData), NodeRareDataShouldStaySmall);
+#else
 COMPILE_ASSERT(sizeof(NodeRareData) == sizeof(SameSizeAsNodeRareData), NodeRareDataShouldStaySmall);
+#endif
 
 } // namespace WebCore
Index: webkitgtk/Source/WebCore/dom/ShadowRoot.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/dom/ShadowRoot.cpp
+++ webkitgtk/Source/WebCore/dom/ShadowRoot.cpp
@@ -43,7 +43,11 @@ struct SameSizeAsShadowRoot : public Doc
     void* host;
 };
 
+#if CPU(M68K)
+COMPILE_ASSERT(sizeof(ShadowRoot) <= sizeof(SameSizeAsShadowRoot), shadowroot_should_stay_small);
+#else
 COMPILE_ASSERT(sizeof(ShadowRoot) == sizeof(SameSizeAsShadowRoot), shadowroot_should_stay_small);
+#endif
 
 enum ShadowRootUsageOriginType {
     ShadowRootUsageOriginWeb = 0,
Index: webkitgtk/Source/WebCore/rendering/style/RenderStyle.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/rendering/style/RenderStyle.cpp
+++ webkitgtk/Source/WebCore/rendering/style/RenderStyle.cpp
@@ -58,7 +58,11 @@ struct SameSizeAsBorderValue {
     unsigned m_width;
 };
 
+#if CPU(M68K)
+COMPILE_ASSERT(sizeof(BorderValue) <= sizeof(SameSizeAsBorderValue), BorderValue_should_not_grow);
+#else
 COMPILE_ASSERT(sizeof(BorderValue) == sizeof(SameSizeAsBorderValue), BorderValue_should_not_grow);
+#endif
 
 struct SameSizeAsRenderStyle : public RefCounted<SameSizeAsRenderStyle> {
     void* dataRefs[7];
@@ -75,7 +79,11 @@ struct SameSizeAsRenderStyle : public Re
     } noninherited_flags;
 };
 
+#if CPU(M68K)
+COMPILE_ASSERT(sizeof(RenderStyle) <= sizeof(SameSizeAsRenderStyle), RenderStyle_should_stay_small);
+#else
 COMPILE_ASSERT(sizeof(RenderStyle) == sizeof(SameSizeAsRenderStyle), RenderStyle_should_stay_small);
+#endif
 
 inline RenderStyle& defaultStyle()
 {
Index: webkitgtk/Source/WebCore/rendering/style/StyleBoxData.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/rendering/style/StyleBoxData.cpp
+++ webkitgtk/Source/WebCore/rendering/style/StyleBoxData.cpp
@@ -33,7 +33,11 @@ struct SameSizeAsStyleBoxData : public R
     uint32_t bitfields;
 };
 
+#if CPU(M68K)
+COMPILE_ASSERT(sizeof(StyleBoxData) <= sizeof(SameSizeAsStyleBoxData), StyleBoxData_should_not_grow);
+#else
 COMPILE_ASSERT(sizeof(StyleBoxData) == sizeof(SameSizeAsStyleBoxData), StyleBoxData_should_not_grow);
+#endif
 
 StyleBoxData::StyleBoxData()
     : m_minWidth(RenderStyle::initialMinSize())
